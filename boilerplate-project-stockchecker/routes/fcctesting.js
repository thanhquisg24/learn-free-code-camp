/*
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *       DO NOT EDIT THIS FILE
 *       For FCC testing purposes!
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

const cors = require("cors");
const fs = require("fs");
const runner = require("../test-runner");

function testFilter(tests, type, n) {
  let out;
  switch (type) {
    case "unit":
      out = tests.filter((t) => t.context.match("Unit Tests"));
      break;
    case "functional":
      out = tests.filter(
        (t) => t.context.match("Functional Tests") && !t.title.match("#example")
      );
      break;
    default:
      out = tests;
  }
  if (n !== undefined) {
    return out[n] || out;
  }
  return out;
}

module.exports = function (app) {
  app.route("/_api/server.js").get((req, res, next) => {
    console.log("requested");
    // eslint-disable-next-line consistent-return
    fs.readFile(`${__dirname}/server.js`, (err, data) => {
      if (err) return next(err);
      res.send(data.toString());
    });
  });
  app.route("/_api/routes/api.js").get((req, res, next) => {
    console.log("requested");
    // eslint-disable-next-line consistent-return
    fs.readFile(`${__dirname}/routes/api.js`, (err, data) => {
      if (err) return next(err);
      res.type("txt").send(data.toString());
    });
  });
  app.route("/_api/controllers/convertHandler.js").get((req, res, next) => {
    console.log("requested");
    // eslint-disable-next-line consistent-return
    fs.readFile(`${__dirname}/controllers/convertHandler.js`, (err, data) => {
      if (err) return next(err);
      res.type("txt").send(data.toString());
    });
  });

  app.get(
    "/_api/get-tests",
    cors(),
    // eslint-disable-next-line consistent-return
    (req, res, next) => {
      console.log("requested");
      if (process.env.NODE_ENV === "test") return next();
      res.json({ status: "unavailable" });
    },
    (req, res, next) => {
      if (!runner.report) return next();
      res.json(testFilter(runner.report, req.query.type, req.query.n));
    },
    (req, res) => {
      // eslint-disable-next-line no-unused-vars
      runner.on("done", (report) => {
        process.nextTick(() =>
          res.json(testFilter(runner.report, req.query.type, req.query.n))
        );
      });
    }
  );
  app.get("/_api/app-info", (req, res) => {
    // eslint-disable-next-line no-underscore-dangle
    const hs = Object.keys(res._headers).filter(
      (h) => !h.match(/^access-control-\w+/)
    );
    const hObj = {};
    hs.forEach((h) => {
      // eslint-disable-next-line no-underscore-dangle
      hObj[h] = res._headers[h];
    });
    // eslint-disable-next-line no-underscore-dangle
    delete res._headers["strict-transport-security"];
    res.json({ headers: hObj });
  });
};
